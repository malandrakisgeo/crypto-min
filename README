An encryption/decryption program with an algorithm I came up on my own.

# The Algorithm.
This is an encryption algorithm I came up with on my own.
It encrypts files based on successive rotations of their bytes.
Here is a verbal description of it.

    1. The user gives an input and a password.
    2. The characters of the password are treated as bytes (u8 in Rust), and successively
        XORed or XNORed, depending on whether their are an odd or an even number of characters.
        Let T the result of this operation.
        T is a byte treated as a three-digit integer between 000-255.
        The first digit defines whether the first rotation is to the left (0 or 1), or to the right (2).
        The second digit defines the number of successive rotations to the right. The third the number
        of rotations to the left.
    3. The bytes of the input are rotated to the right or the left, for as many bits as the "ones" of the password bytes XOR T.
        i.e. We XOR the first char of the password with T, and use the resulting number of 1s to rotate the first char of the input.
             We XOR the second char of the password with T, and use the resulting number of 1s to rotate the second char of the input.
             e.t.c

There is a TODO of optimizing it by working with four bytes at once instead of one.




# Algorithm
  1. diaxwrizoume to input se octades.
    2. Pairnoume ta bits tou password ana oktades kai ta antimetwpizoume ws integers (dhl. oxi characters genika kai aorista)
        Ta kanoume diadoxika XOR h XNOR metaksu tous (analoga an einai
        zugos h monos arithmos xarakthrwn), kai katalhgoume se ena byte pou antistoixei se arithmo apo 000 ews 255.
        To prwto pshfio orizei an tha ksekinhsoume apo aristero (0, 1) h deksi (2) rotation.
        To deutero pshfio orizei, apo to deutero rotation kai meta, posa deksia rotations tha ginontai diadoxika.
        To trito antistoixa gia diadoxika aristera rotations.

        Rotate X (deksia h aristera) th prwth oktada tou input, tosa pshfia osa einai oi assoi tou prwtou byte tou kwdikou XOR 11110000.
        Rotate (Deksia h aristera) th deuterh, tosa pshfia osa einai oi assoi tou deuterou byte XOR 01111000


    3. idia diadikasia apokruptografhshs, me antestrammena ta X, Y



117
Katw apo 200, ara left.




# old-Algorithm
  1. diaxwrizoume to input se octades.
    2.
        rotate X th prwth oso ta duo prwta bits tou kwdikou an upologistoun ws dekadikos (dhl. apo 0 ews 3)
        rotate Y th deuterh oso ta duo deutera
        rotate X th 3h oso to 5o kai 6o bits tou kwdikou
        k.o.k
        assert_eq!(n.rotate_left(8), m);

       X=deksia h aristera, analoga to an to T einai mhden h ena antistoixa. Y to antitheto tou

        T: an o arithmos twn xarakthrwn tou kwdikou einai monos, T = prwto bit XOR teleutaio. Eidallws prwto bit XNOR teleutaio.

    3. idia diadikasia apokruptografhshs, me antestrammena ta X, Y


    extras:
    A. otan oloklhrwnetai o prwtos kuklos sto 2o vhma, kwdikos XOR antestrammenos kwdikos gia padding.
        O elegxos tou kwdikou tha ginetai mesw autou prin arxisei h apokruptografhsh.
        l
    B. o kwdikos DEN MENEI STH RAM H STH CACHE PERISSOTERO APO O,TI XREIAZETAI.
        Lave o,ti metra xreiazontai gia auto.
